{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
#synopsis:
#description:
homepage:            https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2019{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:            {{category}}{{^category}}Web{{/category}}
extra-source-files:
- README.md

dependencies:
  - base >= 4.7 && < 5

ghc-options:
  -Wall

library:
  source-dirs:        src/lib

executables:
  {{name}}:
    source-dirs:      src/exe
    main:             Main.hs
    dependencies:
      - {{name}}

tests:
  spec:
    main:             Spec.hs
    source-dirs:      test/specs
    dependencies:
      - hspec
      - QuickCheck
      - {{name}}
    verbatim:
      build-tool-depends:
        hspec-discover:hspec-discover == 2.*

  doctest:
    main:              DocTest.hs
    source-dirs:       test/doctests
    dependencies:
      - doctest
      - doctest-discover

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE src/lib/Data/String/Yell.hs #-}
module Data.String.Yell (yell) where

import Data.Char (toUpper)

-- | this one is gonna yell at you
--
-- >>> yell "what"
-- "WHAT"
yell :: String -> String
yell = fmap toUpper

{-# START_FILE src/exe/Main.hs #-}
module Main where

import Data.String.Yell (yell)

main :: IO ()
main = do
  putStrLn $ yell "hello world"

{-# START_FILE test/specs/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/specs/Data/String/YellSpec.hs #-}
module Data.String.YellSpec (main, spec) where

import Test.Hspec
import Test.QuickCheck

import Data.String.Yell

-- `main` is here so that this module can be run from GHCi on its own.  It is
-- not needed for automatic spec discovery.
main :: IO ()
main = hspec spec

spec :: Spec
spec = do
  describe "yell" $ do
    it "turns text into all-caps" $ do
      yell "hello" `shouldBe` "HELLO"
    it "is idempotent" $ property $
      \str -> yell str === yell (yell str)


{-# START_FILE doctest-config.json #-}
{
    "sourceFolders": [
        "src/lib"
    ]
}

{-# START_FILE test/doctests/DocTest.hs #-}
{-# OPTIONS_GHC -F -pgmF doctest-discover -optF doctest-config.json #-}

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2019{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.